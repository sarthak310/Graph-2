// color code groups in the graph
//time: O(n2)
//space: O(n)
class Solution {
    void dfs(vector<int>& colors, int node, int color, vector<vector<int>>& graph) {
        colors[node] = color;
        for(int i = 0; i < graph.size(); i++) {
            if(graph[node][i] == 1 && i != node && colors[i] == -1) {
                dfs(colors, i, color, graph);
            }
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> colors(n, -1);
        int c = 0;
        for(int i = 0; i < n; i++) {
            if(colors[i] == -1) {
                dfs(colors, i, c, graph);
                c++;
            }
        }
        vector<int> groups(c, 0);
        for(int i = 0; i < n; i++) {
            groups[colors[i]]++;
        }
        vector<int> infected(c, 0);
        for(int i = 0; i < initial.size(); i++) {
            infected[colors[initial[i]]]++;
        }
        int ans = INT_MAX;
        int diff = INT_MIN;
        for(int i = 0; i < initial.size(); i++) {
            if(infected[colors[initial[i]]] == 1) {
                if(groups[colors[initial[i]]] > diff) {
                    diff = groups[colors[initial[i]]];
                    ans = initial[i];
                }
                else if(groups[colors[initial[i]]] == diff) {
                    ans = min(ans, initial[i]);
                }
            }
        }
        if(ans == INT_MAX) {
            int minNode = INT_MAX;
            for(int i = 0; i < initial.size(); i++) {
                minNode = min(minNode, initial[i]);
            }
            return minNode;
        }
        return ans;
    }
};